package blubberstore;

// Status of a block of blubber.
message BlubberStat {
	// ID of the block.
	required bytes block_id = 1;

	// Size of the data actually stored in the block.
	required uint64 size = 2;

	// SHA-2 checksum of the blocks data.
	required bytes checksum = 3;
}

// Metadata of a block of blubber.
message BlubberBlockHeader {
	// The AES key used to create the block.
	required bytes block_key = 1;

	// Initialization Vector used for the block.
	required bytes iv = 2;

	// SHA-2 checksum of the data stored in the block.
	required bytes checksum = 3;

	// Size of the block.
	required uint64 size = 4;
}

// Response protobuf for blubber block operations.
message BlockId {
	// The requested blubber block ID.
	required bytes block_id = 1;
}

// The block with its ID and data.
message BlockWithData {
	// The requested blubber block ID.
	required bytes block_id = 1;

	// The actual contents of the blubber block to be written.
	required bytes block_data = 2;
}

// Request for copying a blob from the given host.
message BlockSource {
	// The blubber block ID to copy.
	required bytes block_id = 1;

	// The host:port combination to copy it from.
	required string source_host = 2;
}

// The main Blubber Store RPC service.
service BlubberService {
	// Store the blubber black passed in under the given block ID.
	rpc StoreBlob (BlockWithData) returns (BlockId);

	// Retrieve the data from the given block ID.
	rpc RetrieveBlob (BlockId) returns (BlockWithData);

	// Delete the specified blubber block.
	rpc DeleteBlob (BlockId) returns (BlockId);

	// Get some information about the block.
	rpc StatBlob (BlockId) returns (BlubberStat);

	// Copy a blubber block from a different server.
	rpc CopyBlob (BlockSource) returns (BlockId);
}
