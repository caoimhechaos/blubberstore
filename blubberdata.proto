package blubberstore;

// Status of a block of blubber.
message BlubberStat {
	// ID of the block.
	required bytes block_id = 1;

	// Size of the data actually stored in the block.
	required uint64 size = 2;

	// SHA-2 checksum of the blocks data.
	required bytes checksum = 3;

	// The point in time when the block was written to the server,
	// in seconds since January 1, 1970.
	required uint64 timestamp = 4;
}

// Metadata of a block of blubber.
message BlubberBlockHeader {
	// The AES key used to create the block.
	required bytes block_key = 1;

	// Initialization Vector used for the block.
	required bytes iv = 2;

	// SHA-2 checksum of the data stored in the block.
	required bytes checksum = 3;

	// Size of the block.
	required uint64 size = 4;

	// The point in time when the block was written to the server,
	// in seconds since January 1, 1970.
	required uint64 timestamp = 5;
}

// Response protobuf for blubber block operations.
message BlockId {
	// The requested blubber block ID.
	required bytes block_id = 1;
}

// The block with its ID and data.
message BlockWithData {
	// The requested blubber block ID.
	required bytes block_id = 1;

	// The actual contents of the blubber block to be written.
	required bytes block_data = 2;
}

// Request for copying a blob from the given host.
message BlockSource {
	// The blubber block ID to copy.
	required bytes block_id = 1;

	// The host:port combination to copy it from.
	required string source_host = 2;
}

// The status on one individual block on a specific server.
message ServerBlockStatus {
	// The host:port pair of the server.
	required string host_port = 1;

	// The checksum as reported by that server.
	required bytes checksum = 2;

	// The point in time when the block was written to the server,
	// in seconds since January 1, 1970.
	required uint64 timestamp = 3;
}

// A container for the status of a given block.
message BlockStatus {
	// ID of the block.
	required bytes block_id = 1;

	// Required replication factor for the block.
	required uint32 replication_factor = 2;

	// List of all block status records known about the block.
	repeated ServerBlockStatus servers = 3;
}

// A blob report package, consisting of the stat of the blob and the details
// about the host.
message BlockReport {
	// The servers which the block is reported to be located on.
	repeated string server = 1;

	// More details about the block.
	required BlubberStat status = 2;
}

// List of servers which currently hold the block.
message BlockHolderList {
	// The host:port combination of the servers in question.
	repeated string host_port = 1;
}

// The main Blubber Store RPC service.
service BlubberService {
	// Store the blubber black passed in under the given block ID.
	rpc StoreBlob (BlockWithData) returns (BlockId);

	// Retrieve the data from the given block ID.
	rpc RetrieveBlob (BlockId) returns (BlockWithData);

	// Delete the specified blubber block.
	rpc DeleteBlob (BlockId) returns (BlockId);

	// Get some information about the block.
	rpc StatBlob (BlockId) returns (BlubberStat);

	// Copy a blubber block from a different server.
	rpc CopyBlob (BlockSource) returns (BlockId);
}

// Blubber block to server directory service.
service BlubberBlockDirectory {
	// Report to the directory that the block with the given properties is
	// now stored on the specified server.
	rpc ReportBlob (BlockReport) returns (BlockId);

	// Look up all the hosts currently known to hold the requested block.
	rpc LookupBlob (BlockId) returns (BlockHolderList);

	// Remove the given host from the holders of the blob.
	rpc RemoveBlobHolder (BlockReport) returns (BlockId);
}
